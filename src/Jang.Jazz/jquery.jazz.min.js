var jazz = function ($) { var jQ = typeof $ !== "undefined"; var literalBlock = function (a) { this.content = a }; literalBlock.prototype = { toString: function () { return "Literal" }, render: function (a) { var b = this.content; b = b.replace(/\\/g, "\\\\"); b = b.replace(/\"/g, '\\"'); b = b.replace(/\'/g, "\\'"); b = b.replace(/\n/g, "\\n"); return a + '.push("' + b + '");' } }; var expressionBlock = function (a) { this.content = a }; expressionBlock.prototype = { toString: function () { return "Expression" }, render: function (a) { return a + ".push(" + this.content + ");" } }; var codeBlock = function (a) { this.content = a }; codeBlock.prototype = { toString: function () { return "Code" }, render: function (a) { return this.content } }; var parser = function (a, b) { this.codeParser = a; a.parser = this; this.markupParser = b; b.parser = this; this.blocks = []; this.helpers = [] }; parser.prototype = { parseCodeBlock: function (a) { this.codeParser.parseBlock(a) }, parseMarkupBlock: function (a) { this.markupParser.parseBlock(a) }, parse: function (a) { this.markupParser.parseDocument(a); return { blocks: this.blocks, helpers: this.helpers} }, pushBlock: function (a, b) { var c = null; switch (a) { case "literal": { c = new literalBlock(b); break }; case "expression": { c = new expressionBlock(b); break }; case "code": { c = new codeBlock(b); break } } if (c == null) throw "Unexpected block type: " + a; this.blocks.push(c) } }; var markupParser = function () { }; markupParser.prototype = { isValidEmailChar: function (a) { var b = a.charCodeAt(0); if (b >= 48 && b <= 57) return true; if (b >= 65 && b <= 90) return true; if (b >= 97 && b <= 122) return true; return false }, isValidTransition: function (a, b) { if (b == 0) return true; if (b == a.length - 1) return false; if (this.isValidEmailChar(a[b - 1]) && this.isValidEmailChar(a[b + 1])) return false; if (a[b - 1] == "@" || a[b + 1] == "@") return false; return true }, nextTransition: function (a) { for (var b = 0; b < a.length; b++) { if (a[b] == "@" && this.isValidTransition(a, b)) return b } return -1 }, parseBlock: function (a) { if (a == null || a.length == 0) return; var b = this.nextTransition(a); if (b == -1) { this.parser.pushBlock("literal", a.join("")); return } var c = a.slice(0, b).join(""); this.parser.pushBlock("literal", c); this.parser.parseCodeBlock(a.slice(b)) }, parseDocument: function (a) { var b = a.split(""); this.parseBlock(b) } }; var codeParser = function () { this.keywords = ["if", "for", "with", "while", "helper"] }; codeParser.prototype = { acceptBrace: function (a, b) { if (a == null || a.length == 0) return null; var c = [], d = 0, e = b.charCodeAt(0), f = 0; if (e == 40) f = 41; if (e == 91) f = 93; if (a[0] != b) return null; var g = 0; for (var h = 0; h < a.length; h++) { var i = a[h]; var j = i.charCodeAt(0); if (j == e) { if (d == 0) { g++ } c.push(i) } else if (j == f) { if (d == 0) { g-- } c.push(i); if (g == 0) break } else { if (d == j) { d = 0 } else if (j == 34 || j == 39) { d = j } c.push(i) } } return c.join("") }, acceptIdentifier: function (a) { if (a == null || a.length == 0) return null; var b = []; var c, d; for (var e = 0; e < a.length; e++) { var f = a[e]; var g = f.charCodeAt(0); if (e == 0) { if (g == 36 || g == 95 || g >= 65 && g <= 90 || g >= 97 && g <= 122) { b.push(f) } else { return null } } else { if (g == 36 || g == 95 || g >= 65 && g <= 90 || g >= 97 && g <= 122 || g >= 48 && g <= 57) { b.push(f) } else { break } } } return b.join("") }, endBlock: function (a, b, c) { var d = 0, e; var f = null; for (var g = 0; g < a.length; g++) { e = a[g]; if (e == '"' || e == "'") { if (f == null) f = e; else if (f == e) f = null } if (e === b && f == null) d++; if (e === c && f == null) { d--; if (d == 0) return g } } return -1 }, endCodeBlock: function (a) { return this.endBlock(a, "{", "}") }, endExplicitBlock: function (a) { return this.endBlock(a, "(", ")") }, isKeyword: function (a) { for (var b = 0; b < this.keywords.length; b++) { if (a == this.keywords[b]) return true } return false }, nextChar: function (a, b) { for (var c = 0; c < a.length; c++) { if (a[c] == b) return c } return -1 }, parseBlock: function (a) { if (a == null || a.length == 0) return; if (a[0] != "@") { this.parser.parseMarkupBlock(a); return } var b = a[1]; if (b == ":") { this.parseLine(a); return } if (b == "(") { this.parseExplicitExpression(a); return } if (b == "{") { this.parseCodeBlock(a); return } this.parseExpressionBlock(a) }, parseCodeBlock: function (a) { if (a == null || a.length == -1) return; var b = this.endCodeBlock(a); if (b == -1) throw "Unterminated code block."; var c = a.slice(2, b).join(""); this.parser.pushBlock("code", c); this.parser.parseMarkupBlock(a.slice(b + 1)) }, parseExpression: function (a) { var b = a.slice(1); var c = this.readExpression(b); if (c == null) { this.parser.parseMarkupBlock(b) } else { if (c == "helper") { this.parseHelper(a) } else { this.parser.pushBlock("expression", c); this.parser.parseMarkupBlock(a.slice(c.length + 1)) } } }, parseExpressionBlock: function (a) { if (a == null || a.length == -1) return; var b = this.nextChar(a, "("), c = this.nextChar(a, "{"); var d = b < c ? b : c; if (d > -1) { var e = this.trim(a.slice(1, d).join("")); if (this.isKeyword(e)) { this.parseKeyword(e, a); return } } this.parseExpression(a) }, parseExplicitExpression: function (a) { if (a == null || a.length == -1) return; var b = this.endExplicitBlock(a); if (b == -1) throw "Untermined explicit expression."; var c = a.slice(2, b).join(""); this.parser.pushBlock("expression", c); this.parser.parseMarkupBlock(a.slice(b + 1)) }, parseHelper: function (a) { if (a == null || a.length == -1) return; var b = this.endCodeBlock(a); if (b == -1) throw "Unterminated helper block."; var c = this.nextChar(a, "{"); var d = a.slice(7, c + 1), e = this.parser.blocks.length; this.parser.pushBlock("code", "function" + d.join("")); var f = a.slice(c + 1, b); this.parser.parseMarkupBlock(f); this.parser.pushBlock("code", "}"); var g = this.parser.blocks.length; var h = this.parser.blocks.slice(e, g); this.parser.helpers.push(h); this.parser.blocks = this.parser.blocks.slice(0, e); this.parser.parseMarkupBlock(a.slice(b + 1)) }, parseIfBlock: function (a) { if (a == null || a.length == -1) return; var b = this.endCodeBlock(a); if (b == -1) throw "Unterminated code block."; var c = this.nextChar(a, "{"); var d = a.slice(1, c + 1).join(""); this.parser.pushBlock("code", d); var e = a.slice(c + 1, b); this.parser.parseMarkupBlock(e); this.parser.pushBlock("code", "}"); this.parser.parseMarkupBlock(a.slice(b + 1)) }, parseKeyword: function (a, b) { if (b == null || b.length == -1) return; switch (a) { case "if": { this.parseIfBlock(b); break }; case "for": case "with": case "while": { this.parseSimpleBlock(b); break }; default: { this.parseMarkupBlock(b.slice(1)); break } } }, parseLine: function (a) { if (a == null || a.length == -1) return; var b = this.nextChar(a, "\n"); if (b == -1) b = a.length - 1; var c = a.slice(2, b); this.parser.parseMarkupBlock(c); if (b != -1) this.parser.parseMarkupBlock(a.slice(b)) }, parseSimpleBlock: function (a) { if (a == null || a.length == -1) return; var b = this.endCodeBlock(a); if (b == -1) throw "Unterminated code block."; var c = this.nextChar(a, "{"); var d = a.slice(1, c + 1).join(""); this.parser.pushBlock("code", d); var e = a.slice(c + 1, b); this.parser.parseMarkupBlock(e); this.parser.pushBlock("code", "}"); this.parser.parseMarkupBlock(a.slice(b + 1)) }, readExpression: function (a) { if (a == null || a.length == 0) return null; var b = [], c = 1, d = 0; while (true) { if (c == 1) { var e = this.acceptIdentifier(a.slice(d)); if (e == null) break; b = b.concat(e); d += e.length; c = 2 } else if (c == 2) { if (a[d] == "(" || a[d] == "[") { var f = this.acceptBrace(a.slice(d), a[d]); if (f == null) break; b = b.concat(f); d += f.length } else { c = 3 } } else if (c == 3) { if (a[d] == ".") { c = 4; d++; continue } break } else if (c == 4) { var e = this.acceptIdentifier(a.slice(d)); if (e == null) break; b.push("."); c = 1 } } return b.join("") }, trim: function (a) { a = a.replace(/^\s+/, ""); for (var b = a.length - 1; b >= 0; b--) { if (/\S/.test(a.charAt(b))) { a = a.substring(0, b + 1); break } } return a } }; var runner = function (a, b) { this.blocks = a; this.helpers = b; this.template = null; this.prepare() }; runner.prototype = { prepare: function () { var render = []; render.push("(function(model) {"); for (var i in this.helpers) { var helper = this.helpers[i]; render.push(helper[0].render()); render.push("var hr = [];"); for (var j = 1; j < helper.length - 1; j++) { render.push(helper[j].render("hr")) } render.push('return hr.join("");'); render.push(helper[helper.length - 1].render()) } render.push("var r = [];"); for (var i in this.blocks) { render.push(this.blocks[i].render("r")) } render.push('return r.join("");'); render.push("});"); var tmp = render.join("\n"); this.template = eval(tmp) }, run: function (a) { return this.template(a) } }; var jazz = { parse: function (a, b) { var c = new parser(new codeParser, new markupParser); var d = c.parse(a); var e = new runner(d.blocks, d.helpers); return e.run(b) } }; if (jQ) { $.fn.jazz = function (a) { var b = $(this).text(); return jazz.parse(b, a) } } return jazz }; jazz = typeof jQuery === "undefined" ? jazz() : jazz(jQuery)